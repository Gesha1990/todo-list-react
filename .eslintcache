[{"C:\\test-app\\src\\App.tsx":"1","C:\\test-app\\src\\reportWebVitals.ts":"2"},{"size":6516,"mtime":1610615130561,"results":"3","hashOfConfig":"4"},{"size":425,"mtime":1610528457319,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"fpzm5o",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\test-app\\src\\App.tsx",["11","12","13","14","15","16"],"import React, { useState } from \"react\";\nimport classNames from \"classnames/bind\";\nimport logo from \"./logo.svg\";\n//Style\nimport \"./App.scss\";\nimport trash from \"./assets/icons/trash.svg\";\n\nfunction App() {\n  interface TaskItem {\n    id: number;\n    taskValue: string;\n    active: boolean;\n    done: boolean;\n  }\n  // Function to load tasks from local storage\n  const loadArrFromLocalStorage = (): TaskItem[] => {\n    try {\n      const serializedState = localStorage.getItem(\"state\");\n      if (serializedState === null) return [];\n      return JSON.parse(serializedState);\n    } catch (e) {\n      console.log(e);\n      return [];\n    }\n  };\n // Function to load mode from local storage\n  const loadModeFromLocalStorage = (): string => {\n    try {\n      const serializedState = localStorage.getItem(\"mode\");\n      if (serializedState === null) return 'all';\n      return serializedState;\n    } catch (e) {\n      console.log(e);\n      return 'all';\n    }\n  };\n  const [activeSearchBtn, setActiveSearchBtn] = useState<string>(loadModeFromLocalStorage());\n  const [taskInputValue, setTaskInputValue] = useState<string>(\"\");\n  const [searchInputValue, setSearchInputValue] = useState<string>(\"\");\n  const [taskItemArr, addTaskItemToArr] = useState<Array<TaskItem>>(loadArrFromLocalStorage());\n\n  // Function to filter tasks by mode and search word\n  const filteredArrByMode = (arr: TaskItem[]) => {\n    switch (activeSearchBtn) {\n      case \"done\":\n        return arr.filter((task: TaskItem) => task.done).filter((task: TaskItem) =>{\n           return task.taskValue.indexOf(searchInputValue)!=-1\n        });\n      case \"active\":\n        return arr.filter((task: TaskItem) => task.active).filter((task: TaskItem) =>{\n          return task.taskValue.indexOf(searchInputValue)!=-1\n       });;\n      default:\n        return arr.filter((task: TaskItem) =>{\n          return task.taskValue.indexOf(searchInputValue)!=-1\n       });;\n    }\n  };\n  // Every state changing we save in localstorage\n  const saveToLocalStorage = (taskItemArr: TaskItem[], mode: string): void => {\n    try {\n      const serializedState = JSON.stringify(taskItemArr);\n      localStorage.setItem(\"state\", serializedState);\n      localStorage.setItem(\"mode\", mode);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  saveToLocalStorage(taskItemArr, activeSearchBtn);\n\n  return (\n    <div className=\"todo-list\">\n      <h1>Todo list</h1>\n      <div className=\"search-bar\">\n        <input\n          className=\"search-bar__input\"\n          placeholder=\"type to search\"\n          onChange={(e) => {\n            setSearchInputValue(e.target.value);\n          }}\n        />\n        <div className=\"search-bar__buttons\">\n          <div\n            className={classNames({ active: activeSearchBtn === \"all\" })}\n            onClick={() => {\n              setActiveSearchBtn(\"all\");\n            }}\n          >\n            All\n          </div>\n          <div\n            className={classNames({ active: activeSearchBtn === \"active\" })}\n            onClick={(): void => {\n              setActiveSearchBtn(\"active\");\n            }}\n          >\n            Active\n          </div>\n          <div\n            className={classNames({ active: activeSearchBtn === \"done\" })}\n            onClick={(): void => {\n              setActiveSearchBtn(\"done\");\n            }}\n          >\n            Done\n          </div>\n        </div>\n      </div>\n      <div className=\"todo-list\">\n        {/* before we show a tasks we should filter depends on what mode is now  */}\n        {filteredArrByMode(taskItemArr).map((taskItem) => {\n          return (\n            <div\n              className={classNames(\"todo-list__item\", {\n                active: taskItem.active === true,\n              })}\n              key={taskItem.id}\n            >\n              <div\n                className={classNames(\"todo-list__item-text\", {\n                  done: taskItem.done === true,\n                })}\n                onClick={(): void => {\n                  const newTodos: TaskItem[] = taskItemArr.map((task) => {\n                    if (task.id == taskItem.id) {\n                      task.done = !task.done;\n                      // if task done she automatically becomes no active\n                      task.active = false;\n                      return task;\n                    }\n                    return task;\n                  });\n                  addTaskItemToArr(newTodos);\n                }}\n              >\n                {taskItem.taskValue}\n              </div>\n              <div className=\"todo-list__item-btn\">\n                <div>\n                  <img\n                    src={trash}\n                    alt=\"trash\"\n                    onClick={(): void => {\n                      const newTodos = taskItemArr.filter(\n                        (task) => task.id !== taskItem.id\n                      );\n                      addTaskItemToArr(newTodos);\n                    }}\n                  />\n                </div>\n                <div\n                  onClick={(): void => {\n                    const newTodos: TaskItem[] = taskItemArr.map((task) => {\n                      if (task.id == taskItem.id) {\n                        task.active = !task.active;\n                         // if task active she automatically becomes no done\n                        task.done = false;\n                        return task;\n                      }\n                      return task;\n                    });\n                    addTaskItemToArr(newTodos);\n                  }}\n                >\n                  !\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"add-task\">\n        <input\n          placeholder=\"What needs to be done\"\n          value={taskInputValue}\n          onChange={(e): void => {\n            setTaskInputValue(e.target.value);\n          }}\n        />\n        <div\n          onClick={(): void => {\n            if(taskInputValue.trim() === \"\"){\n              alert('Please write a task')\n            } else{\n            const newTodos = [\n              ...taskItemArr,\n              {\n                id: new Date().getUTCMilliseconds(),\n                taskValue: taskInputValue,\n                active: false,\n                done: false,\n              },\n            ];\n            addTaskItemToArr(newTodos);\n            setTaskInputValue(\"\");\n          }\n          }}\n          \n        >\n          Add Item\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\test-app\\src\\reportWebVitals.ts",[],{"ruleId":"17","severity":1,"message":"18","line":3,"column":8,"nodeType":"19","messageId":"20","endLine":3,"endColumn":12},{"ruleId":"21","severity":1,"message":"22","line":47,"column":59,"nodeType":"23","messageId":"24","endLine":47,"endColumn":61},{"ruleId":"21","severity":1,"message":"22","line":51,"column":58,"nodeType":"23","messageId":"24","endLine":51,"endColumn":60},{"ruleId":"21","severity":1,"message":"22","line":55,"column":58,"nodeType":"23","messageId":"24","endLine":55,"endColumn":60},{"ruleId":"21","severity":1,"message":"25","line":125,"column":33,"nodeType":"23","messageId":"24","endLine":125,"endColumn":35},{"ruleId":"21","severity":1,"message":"25","line":154,"column":35,"nodeType":"23","messageId":"24","endLine":154,"endColumn":37},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='."]